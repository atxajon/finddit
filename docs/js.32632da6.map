{"version":3,"sources":["js/redditapi.js","js/index.js"],"names":["searchTerm","searchLimit","sortBy","urlToFetch","response","fetch","ok","jsonResponse","json","data","children","map","errorMessage","status","statusText","error","Error","message","searchForm","document","getElementById","searchInput","addEventListener","e","value","querySelector","search","then","results","output","forEach","post","image","preview","images","source","url","title","truncateText","selftext","subreddit","score","innerHTML","preventDefault","showMessage","mssg","className","div","createElement","appendChild","createTextNode","searchContainer","insertBefore","alertInterval","setInterval","undefined","remove","text","limit","shortened","indexOf","substring"],"mappings":";AAAe,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,CACL,OAAA,MAAOA,EAAYC,EAAaC,KAChCC,MAAAA,0CAAqDH,UAAmBE,WAAgBD,IAC1F,IACIG,MAAAA,QAAiBC,MAAMF,GACzBC,GAAAA,EAASE,GAAI,CAIRC,aAHoBH,EAASI,QAGhBC,KAAKC,SAASC,IAAIF,GAAQA,EAAKA,MAEhD,CACCG,IAAAA,KAAkBR,EAASS,WAAWT,EAASU,cAE7CC,MADE,IAAIC,MAAMJ,IAGpB,MAAMG,GACEA,QAAAA,yBAAyBA,EAAME;;ACmD7C,aAlEA,IAAA,EAAA,QAAA,kBAkEA,EAAA,EAAA,GAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAhEA,MAAMC,EAAaC,SAASC,eAAe,eACrCC,EAAcF,SAASC,eAAe,gBAE5CF,EAAWI,iBAAiB,SAAUC,IAC9BvB,MAAAA,EAAaqB,EAAYG,MACzBtB,EAASiB,SAASM,cAAc,gCAAgCD,MAChEvB,EAAckB,SAASC,eAAe,SAASI,MAGlC,KAAfxB,GACU,EAAA,2BAA4B,gBAE9BwB,EAAAA,MAAQ,GAGbE,EAAAA,QAAAA,OAAO1B,EAAYC,EAAaC,GAAQyB,KAC7CC,IACMC,IAAAA,EAAS,6BACLC,EAAAA,QAAQC,IAEVC,IAAAA,EAAQD,EAAKE,QACbF,EAAKE,QAAQC,OAAO,GAAGC,OAAOC,IAC9B,sEACO,gFAEsBJ,+FAEND,EAAKM,8CACPC,EAAaP,EAAKQ,SAAU,gCACxCR,EAAKK,oJAGiCL,EAAKS,sEACdT,EAAKU,yDAKzC,GAAA,SACDrB,SAAAA,eAAe,WAAWsB,UAAYb,IAG/Cc,EAAAA,mBAGJ,MAAMC,EAAc,CAACC,EAAMC,KACnBC,MAAAA,EAAM5B,SAAS6B,cAAc,OAC/BF,EAAAA,mBAAqBA,IACrBG,EAAAA,YAAY9B,SAAS+B,eAAeL,IAClCM,MAAAA,EAAkBhC,SAASC,eAAe,oBAC1CM,EAASP,SAASC,eAAe,UACvBgC,EAAAA,aAAaL,EAAKrB,GAG5B2B,MAAAA,EAAgBC,YAAY,gBAGXC,IAFApC,SAASM,cAAc,YAGjCA,SAAAA,cAAc,UAAU+B,SACnBH,cAAAA,KAEf,MAGCf,EAAe,CAACmB,EAAMC,KACpBC,MAAAA,EAAYF,EAAKG,QAAQ,IAAKF,GAChCC,OAAc,GAAdA,EAAwBF,EACrBA,EAAKI,UAAU,EAAGF","file":"js.32632da6.map","sourceRoot":"../src","sourcesContent":["export default {\n  search: async (searchTerm, searchLimit, sortBy) => {\n    const urlToFetch = `https://www.reddit.com/search.json?q=${searchTerm}&sort=${sortBy}&limit=${searchLimit}`;\n    try {\n      const response = await fetch(urlToFetch);\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        // console.log(jsonResponse);\n        // console.log(jsonResponse.data.children);\n        return jsonResponse.data.children.map(data => data.data);\n      }\n      else {\n        let errorMessage = `${response.status} (${response.statusText})`,\n        error = new Error(errorMessage);\n        throw(error);\n      }\n    } catch(error) {\n      console.error(`Error in fetch: ${error.message}`);\n    }\n  }\n}\n","// @todo: use webpack or parcel to compress...\n\nimport reddit from './redditapi.js';\n\nconst searchForm = document.getElementById('search-form');\nconst searchInput = document.getElementById('search-input');\n\nsearchForm.addEventListener('submit', e => {\n  const searchTerm = searchInput.value;\n  const sortBy = document.querySelector('input[name=\"sortby\"]:checked').value;\n  const searchLimit = document.getElementById('limit').value;\n\n  // Check input.\n  if (searchTerm === '') {\n    showMessage('Please add a search term', 'alert-danger');\n  }\n  searchInput.value = '';\n\n  // Search Reddit.\n  reddit.search(searchTerm, searchLimit, sortBy).then(\n    results => {\n      let output = '<div class=\"card-columns\">';\n      results.forEach(post => {\n        // Check for image\n        let image = post.preview\n          ? post.preview.images[0].source.url\n          : 'https://cdn.comparitech.com/wp-content/uploads/2017/08/reddit-1.jpg';\n        output += `\n        <div class=\"card mb-2\">\n        <img class=\"card-img-top\" src=\"${image}\" alt=\"Card image cap\">\n        <div class=\"card-body\">\n          <h5 class=\"card-title\">${post.title}</h5>\n          <p class=\"card-text\">${truncateText(post.selftext, 100)}</p>\n          <a href=\"${post.url}\" target=\"_blank\n          \" class=\"btn btn-primary\">Read More</a>\n          <hr>\n          <span class=\"badge badge-secondary\">Subreddit: ${post.subreddit}</span> \n          <span class=\"badge badge-dark\">Score: ${post.score}</span>\n        </div>\n      </div>\n        `;\n    });\n    output += '</div>';\n    document.getElementById('results').innerHTML = output;\n  });\n\n  e.preventDefault();\n})\n\nconst showMessage = (mssg, className) => { \n  const div = document.createElement('div');\n  div.className = `alert ${className}`;\n  div.appendChild(document.createTextNode(mssg));\n  const searchContainer = document.getElementById('search-container');\n  const search = document.getElementById('search');\n  searchContainer.insertBefore(div, search);\n\n  // Remove alert message after 3 seconds.\n  const alertInterval = setInterval(function() {\n    const alertDisplay = document.querySelector('.alert');\n    // If we have a div.alert remove it and exit the setInterval loop.\n    if (alertDisplay !== undefined) {\n      document.querySelector('.alert').remove();\n      clearInterval(alertInterval);\n    }\n  }, 3000);\n}\n\nconst truncateText = (text, limit) => {\n  const shortened = text.indexOf(' ', limit);\n  if (shortened == -1) return text;\n  return text.substring(0, shortened);\n}"]}